### Starting build.
# Target: test2.ml.depends, tags: { extension:ml, file:test2.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules test2.ml > test2.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamldep.opt -modules parser.mli > parser.mli.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules ast.ml > ast.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlc.opt -c -o ast.cmo ast.ml
+ ocamlc.opt -c -o ast.cmo ast.ml
File "ast.ml", lines 57-67, characters 25-69:
57 | .........................function
58 |     Literal(l) -> string_of_int l
59 |   | BoolLit(true) -> "True"
60 |   | BoolLit(false) -> "False"
61 |   | StringLit(s) -> s
...
64 |     string_of_expr e1 ^ " " ^ string_of_op o ^ " " ^ string_of_expr e2
65 |   | Assign(v, e) -> v ^ " = " ^ string_of_expr e
66 |   | Call(f, el) ->
67 |       f ^ "(" ^ String.concat ", " (List.map string_of_expr el) ^ ")"
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
VariableInit (_, _, _)
# Target: sast.ml.depends, tags: { extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules sast.ml > sast.ml.depends # cached
# Target: scanner.mll, tags: { extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q scanner.mll # cached
# Target: scanner.ml.depends, tags: { extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules scanner.ml > scanner.ml.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlc.opt -c -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules semant.ml > semant.ml.depends
# Target: sast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
ocamlc.opt -c -o sast.cmo sast.ml
# Target: scanner.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, quiet }
ocamlc.opt -c -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, quiet }
ocamlc.opt -c -o semant.cmo semant.ml
+ ocamlc.opt -c -o semant.cmo semant.ml
File "semant.ml", lines 84-131, characters 34-41:
 84 | ..................................function
 85 |       Literal l -> (Int, SLiteral l)
 86 |     | BoolLit l -> (Bool, SBoolLit l)
 87 |     | StringLit l -> (String, SStringLit l)
 88 |     | Id var -> (type_of_identifier symbol_table var, SId var)
...
128 |               in (check_assign ft et err, e')
129 |         in
130 |         let args' = List.map2 check_call fd.formals args
131 |         in (fd.rtyp, SCall(fname, args'))
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
VariableInit (_, _, _)
# Target: test2.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:test2.cmo, file:test2.ml, implem, ocaml, quiet }
ocamlc.opt -c -o test2.cmo test2.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlopt.opt -c -o ast.cmx ast.ml
+ ocamlopt.opt -c -o ast.cmx ast.ml
File "ast.ml", lines 57-67, characters 25-69:
57 | .........................function
58 |     Literal(l) -> string_of_int l
59 |   | BoolLit(true) -> "True"
60 |   | BoolLit(false) -> "False"
61 |   | StringLit(s) -> s
...
64 |     string_of_expr e1 ^ " " ^ string_of_op o ^ " " ^ string_of_expr e2
65 |   | Assign(v, e) -> v ^ " = " ^ string_of_expr e
66 |   | Call(f, el) ->
67 |       f ^ "(" ^ String.concat ", " (List.map string_of_expr el) ^ ")"
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
VariableInit (_, _, _)
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlopt.opt -c -o parser.cmx parser.ml
# Target: sast.cmx, tags: { compile, extension:cmx, extension:ml, file:sast.cmx, file:sast.ml, implem, native, ocaml, quiet }
ocamlopt.opt -c -o sast.cmx sast.ml
# Target: scanner.cmx, tags: { compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, quiet }
ocamlopt.opt -c -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, quiet }
ocamlopt.opt -c -o semant.cmx semant.ml
+ ocamlopt.opt -c -o semant.cmx semant.ml
File "semant.ml", lines 84-131, characters 34-41:
 84 | ..................................function
 85 |       Literal l -> (Int, SLiteral l)
 86 |     | BoolLit l -> (Bool, SBoolLit l)
 87 |     | StringLit l -> (String, SStringLit l)
 88 |     | Id var -> (type_of_identifier symbol_table var, SId var)
...
128 |               in (check_assign ft et err, e')
129 |         in
130 |         let args' = List.map2 check_call fd.formals args
131 |         in (fd.rtyp, SCall(fname, args'))
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
VariableInit (_, _, _)
# Target: test2.cmx, tags: { compile, extension:cmx, extension:ml, file:test2.cmx, file:test2.ml, implem, native, ocaml, quiet }
ocamlopt.opt -c -o test2.cmx test2.ml
# Target: test2.native, tags: { dont_link_with, extension:native, file:test2.native, link, native, ocaml, program, quiet }
ocamlopt.opt ast.cmx parser.cmx sast.cmx scanner.cmx semant.cmx test2.cmx -o test2.native
# Compilation successful.
